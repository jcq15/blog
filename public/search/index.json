[{"content":"鲁迅曾经说过，好的心态是成功的一半。在准备演之前，一定要调整好心态：\n告诉自己：从现在开始我就是一个演员！以后将狠下心来演，坚决不好好打！\n这种心理建设十分重要，很多初心者往往不习惯坑人，或者遇到顺风局就贪了，忍不住好好打，结果功亏一篑，半途而废，演员炼成计划大失败。\n前言：暗改机制浅说 在一款游戏中，匹配机制和暗改机制一直备受诟病。众所周知，游戏可以通过许多方式改变比赛公平性，例如故意匹配坑队友、强行让人掉线、暗改数值与技能方向等。大量事实使人们认识到：\n排位赛的胜率、个人评分、战绩等一切内容完全是由系统操控的。\n系统这么做的目的是最大限度增加整体活跃度。注意是整体活跃度，而不是单个玩家的活跃度，因为整体活跃度才是和利润直接相关的。一款游戏火，自然容易赚钱。\n为了达到这一目的，系统需要的不是公平竞技，也不是让所有玩家胜率都是 50%。一款游戏必须有人打得好，有人打得不好，这样才有热度。所以：\n 系统会随机安排一些玩家打得好，把他们暗改到碾压大多数玩家，这样才会有主播出现，才会有各种比赛出现，游戏自然会火 同时，大多数人都被暗改到 50% 胜率，以增加用户粘性，就是所谓的“韭菜” 少数玩家会变成“坑货”，段位迟迟上不去。这也是没办法的事，因为每个段位都得有人啊，不然随便抓一个人都是王者，这游戏谁爱玩？所以必须有人卡在黄金白银，当然这部分人占少数，因为他们很容易弃坑，丢了玩家官方就亏了  几乎所有玩家都知道“系统暗改”这一现象，但许多人的认识并不全面，暗改并不是简单地让你向 50% 胜率回归，而是从根本上直接决定你的所有表现，包括段位、个人评分、不同英雄的“水平”，都是系统内定的。而具体你会被暗改到什么水平，全看运气。你的段位，仅取决于运气和局数，而与水平毫无关系。\n所以要演！ 如上所说，如果我们真的认真玩游戏，就给官方当了韭菜了。同时，对于官方这种行为，我们必须奋起反抗，这就是“演”的起源。我们总结了演的好处：\n 恶化游戏环境  这并不是愤世嫉俗，短暂的恶化游戏环境是为了在更长远的尺度上游戏环境变好。演员多了游戏环境自然差，官方就要付出代价，包括完善举报机制、减少暗改行为等，而这些行为都是好的。\n收获快乐  想明白了暗改机制，好好打游戏就没有快乐了，因为一切都是系统内定的。五杀也好，MVP 也罢，那些高光时刻都和你的水平无关，这样玩游戏乐趣何在？而演就不一样，演是在和系统斗智斗勇，在坑人中收获无尽的快乐。看着其他玩家气到跳脚又无能为力，想骂你又怕被举报，你不高兴吗？\n演才能上分  演可以降低你的评分，让系统误认为你菜，自然会优化你的游戏体验，包括让你伤害更高、血更多、对面更坑等。这就是**“演才能上分”**。\n演员的核心理论 在实践中，“演”唯一目标是坑人。所以一定要让其他玩家知道你在演，让他们知道你故意不好好打气他们。另一方面，“演”会被举报扣分，扣分多了就禁赛了，为了实现可持续发展，我们要让系统不知道我们在演。这就是演的核心理论：\n尽量让玩家知道你在演，尽量让系统不知道你在演。\n演的具体技术 下面进入本文的正题：具体演法。我们大体按时间顺序介绍。\n0. 调整心态 鲁迅曾经说过，好的心态是成功的一半。在准备演之前，一定要调整好心态：\n告诉自己：从现在开始我就是一个演员！以后将狠下心来演，坚决不好好打！\n这种心理建设十分重要，很多初心者往往不习惯坑人，或者遇到顺风局就贪了，忍不住好好打，结果功亏一篑，半途而废，演员炼成计划大失败。为此，我们要充分认识暗改机制，坚持以下两个基本点：\n 打得好不是你厉害，打得菜也不是你菜！一切都是运气，都是内定！ 胜率是天定的，演并不会影响胜率，所以不要不舍得演顺风局！  唯有坚定不移地坚持以上演员思想，我们才能成为优秀的演员。\n1. 上演演“未局” 俗话说，上演演未局，中演演中局，下演演已局。意思是，好的演员在没开始对局的时候就已经演上了，普通演员在对局中才演，而辣鸡演员都快打完了要输了才想起来演两下。我们要“演未局”。具体技术有以下几种：\n1.1 改个搞人心态的名字 类似“以后每局必演”、“我专门气你们”这种名字，让人看了就心态炸裂，演人于未局。\n注意过于搞人的昵称会被举报违规，笔者曾经用“以后每局必演”被举报过。举报成功的后果是，官方给你一张改名卡并勒令改名，如果迟迟不改就封号。虽然本质上没啥伤害，但听说一直被举报昵称后果比较严重，所以如果你被举报了两三次昵称，就收敛点，味别太冲，类似“专业送塔”这种名字是没问题的。\n1.2 定制快捷消息 “干得漂亮”是必备的，后面会说具体用法。其他搞人心态的快捷消息主要是听起来比较阴阳怪气的，或者进攻性强的，比如”准备越塔强攻！“、”兄弟们，一波啦！“（这条在我方被对面一波的时候发最佳）。\n具体用什么消息取决于个人习惯，只要对局前设置好就好，要把常用的放到上面，甚至可以多重复几条，防止点错。不一定设置满，怎么方便怎么来。\n1.3 设置全能选手 全能选手最后选人，其好处我们马上会说到。\n没有全能选手的，去刷一波就好。全能选手只看熟练度，不看水平，所以多打几局都能有。\n1.4 提前设置输入法 输入法里面要配置好各种言论，包括但不限于：\n 选人阶段“昭告天下”的发言 申诉常用言论 反举报成功后的嘲讽言论  以上内容含义与具体话术后面会讲。看完本文后，大家可以把这些语句准备好，提前设置到输入法快捷消息里，保证能迅速发出。省时省力。\n2. 开屏雷击 现在，你开局了，系统为你匹配到了 4 个可怜的队友。要怎么演呢？\n2.1 昭告天下 在 ban 人和其他人选人的时候，先别声张，闷声发大财，不让他们知道你要演。等他们选完了拿手英雄（可能有的人还选了准备冲战力的英雄！），你再昭告天下，他们一定炸裂！\n昭告天下指的是在聊天框中快速发言，让大家明白你是演员，范例话术如下：\n 我要坑人！我是专业演员，你们要被我坑了！\n 具体内容大家自行发挥，类似的话准备 2~3 句即可。时机一到迅速发出。\n注意：这个阶段的发言不会被客服查看，所以一定要利用好！对局中就不能说话了，否则分分钟禁言你！\n昭告天下的时机不能过早或过晚。过早他们会提前意识到你要演，可能他们会趁机练英雄坑人，你就气不到他们了；过晚有的人没来得及看完你的文字就开局了，一样不好。\n由于我们设置了全能选手，绝大多数对局我们都是 5 楼。如果我方先选，顺序是我方 1 楼、我方 23 楼、我方 45 楼，那么在我方 23 楼选完人之后你就可以昭告天下了，可以坑三个人，并且其他人有充足的时间来看你的“虎狼之辞”。如果我方后选，我方 34 楼选完再昭告天下即可。\n2.2 针对性演人 昭告天下之后，就该我们选人了。策略有 3 种，这三种都可以，看具体情况选用：\n 正常选人 练英雄 针对性演人  正常选人指的是像正常人一样补位。练英雄就是选不拿手的英雄。\n重点说一下“针对性演人”技术。我们要找一个倒霉蛋，选和他一样的位置，他是射手你就选射手，他是打野你也选打野，然后一直跟着他蹭经济，他必然被气到爆炸！\n“针对性演人”风险高，演不好会被举报成功，所以不宜一直使用。什么时候使用呢？俗话说“枪打出头鸟”，如果选人的时候有人发言表达出自己很想赢，比如他说“我晋级赛，都好好打”，或者他发了金牌银牌战绩，或者说“我带飞”之类的话，这种人往往比较暴躁，这时候就针对性演他一手。说不定他还会骂我们或者反演我们，那就赚大了，对局之后直接举报，举报成功了嘲讽他一波（对局后的举报嘲讽技术后面会说），他得气死！\n3. 对局中 演员界有一句话，叫三分场内七分场外，意思是演员发挥的主要场景不是“对局中”，而是对局外。事实上，为了避免被举报封号，对局中我们能做的事很有限（详见“降低被举报几率的 tips”）。真正的演技还是要靠对局前和对局后。\n但不得不说，对局毕竟是一局游戏的主体部分，是一场好戏的骨架，所以还是不能掉以轻心。\n3.0 降低被举报几率的 tips 我们把这块放到前面来讲，因为 99% 的被举报都是对局中演技出现了纰漏造成的。一定要牢记，留得青山在，不怕没柴烧，演固然重要，但要是被封号就得不偿失了，所以一定要注意。\n控制战绩 我们虽然是演，但千万不要送人头。我们这种专业演员，违规率一定相当高，所以战绩稍微有一点风吹草动就申诉不成功。牢记以下几个原则：\n KDA 别太差 不要死太多次 适当打输出 混够参团率  如果战绩记作 a - b - c，我们一般要把战绩控制到 a ≈ b，a 和 b 的值看其他队友，如果他们打的好，你可以打到 5-3，6-4 都没问题，但如果他们打得不好，你也不能演太猛，0-4，0-5 这种会被举报的。可以打 0-3-3，1-2-2 这种，看起来比较混，但真的计算 KDA 又不太低那种。\n下一步是控输出太高会失去坑人的意义，输出太低会被举报，一般建议控制在 10-15% 左右为最佳，不能低于 10%，否则必被举报成功。输出在游戏中没有实时显示，比较难控制，推荐使用时间片轮转法：例如你平时的输出是 20%，那么你在第 3n、3n+1 分钟正常打输出，3n+2 分钟摸鱼，输出就大致是以前的 2/3 了。\n参团率 = （你的人头 + 你的助攻）/ 全队总人头\n我们要控制参团率在 20% 以上，不然容易被举报。也就是说全队每产生 4 个人头，你就得去混一个助攻了（等 5 个你再去混可能来不及！）。如果演太猛了混助攻有困难，可以出极影，只要你站在队友边上，他杀人就算你的助攻。\n谨言慎行 对局中一句话也不要说，不要发文字消息，不要语音里面说话！现在言语违规处罚很重，我平时举报别人，只要对方稍微有一点不礼貌发言就是扣 7 分禁言 24 小时！\n其他话也不要说，不能在对局中说“我是演员”一类的话，否则会被举报态度消极。反正别说话就对了，我们有许多别的演法，何必非要撞枪口呢？\n3.1 “干得漂亮”！ 漂亮栈 虽然不能说话，但发快捷消息是不犯法的。只要发生了对我方不利的事件，就发一个“干得漂亮”，很多人会心态炸裂的！不利事件包括但不限于：\n 我方有人死亡 我方防御塔被摧毁 对方拿到龙  有时候我方不利事件太频繁，快捷消息 CD 不够，这时候我一般用“漂亮栈”法，维护一个 int 用来记录当前栈中有几个待发的“干得漂亮”，CD 好了就发一个，直到发完为止。\n失去爆破 有时候，“漂亮栈”中还有没发的消息，但这时候发生了对我方有利事件，比如队友拿了人头，这时候会发生失去爆破，立刻清空“漂亮栈”，剩余内容不再发。（否则队友会误认为我们在夸他）\n扩展 还有许多快捷消息可以利用，希望大家展开脑洞自行开发，这里举一例：在我方死了好几个人，对方开始推塔的时候，可以发“兄弟们，一波啦！”，当队友被反野可以发“请不要在野区踏青”。\n记得把要用的快捷消息提前设置好！\n3.2 卖队友 演的时候还有很多实用的卖队友技术，这里举几例，其他有待大家自行发掘。\n 大乔往危险地方开大 对面东皇咬住队友之后疯狂打东皇 假装和队友一起抓人，队友上了我们就跑  3.3 眼观六路 我们的最终目的是气人。**有什么比被坑了还被举报更气呢？**我们对局中一定要认真观察其他队友有无违规行为，如果有，记住他是谁，犯了哪条，对局之后一定要举报！言语违规和挂机基本必成，而且很容易有人被我们演到骂人/挂机，所以一定要记住谁违规了！\n4. 对局后 对局结束之后，真正的“演”才刚刚开始。\n4.1 申诉 由于长期演，我们会有 80% 的对局会被举报，并且由于违规率高，举报几乎必然成功，但不要害怕，只要演技高超，申诉的成功率几乎是 100%，信誉积分和信誉经验会返还的（但是违规率不下降，这就是违规率居高不下的原因）。\n点开邮箱里的被举报通知，然后选择“客服反馈”，就可以申诉了。申诉的话术要注意以下几点：\n 态度端正，不要骂人，也不用低声下气，正常语气就行 要清楚地表达“我没有违规”、“客服可以自行查看录像”，只要提到这两点并且没有犯太明显错误，申诉都能成功 可以多写几句，增加说服力，随便找点借口就行，例如“这局对面阿轲老抓我”，尽管阿轲一次也没抓死你，你这么说也没事，反正客服不会注意这些  4.2 反举报 就是举报其他人。如果有人战绩不佳，或者骂人了，或者挂机了，举报他！别忘了一举不成功可以深入举报！\n尤其是言语违规和挂机，这两种举报成功率极高，并且不能申诉，不要错过！\n4.3 嘲讽 如果有人对局中被我们气到了，或者我们反举报成功了，可以发消息嘲讽他。\n怎么发消息呢？在战绩中找到这局，点那人头像（可能要多点几次才能成功），进入该人资料页，有一个绿色的“发送消息”，这个是通过微信游戏发送的，所以只要不太过分，不会被举报。而且只要你关闭了微信游戏入口，他们连还嘴的机会都没有！\n说啥呢？各位自行发挥，比如“我是专业坑人的，我是上把后羿，我故意演你，你骂人被我举报了。”\n可以连续发送三句！\n后记 演员之路，道阻且长。今天就给大家介绍到这里，希望大家早日成为最强演员！\n","date":"2021-05-02","permalink":"https://blog.shadiao.online/post/act_wzry/","tags":["游戏"],"title":"演员大型教程——怎么演气人还不被举报？"},{"content":"1 OUR PICTURE OF THE UNIVERSE 宇宙是啥样的？ 很久以前：地球是平的\n亚里士多德：地球是圆的，因为：\n 月食是圆形的 北极星的位置变化  托勒密的天球（地心说）： 根据托勒密天球学说，月球有时候会看起来更大，但实际并没有。但这并不影响教会支持他。\n哥白尼：日心说，轨道是圆\n 他发现木星有卫星！  开普勒：哦我的上帝，轨道应该是椭圆\n牛顿：万有引力与三定律，好活\n一个 bug 根据万有引力定律，宇宙会不断收缩！\n牛顿的 infinite static universe 说宇宙无限大就行了，没有中心点往哪收缩去？显然这不对：\n 有没有中心点和是否收缩无关。（一些人试图修改牛顿的理论，认为万有引力足够远时会变成斥力，从而达到平衡。但问题是，这是不稳定平衡。） 所有星体的光线会把夜空照的灯火通明：为了解释这个矛盾，必须假设星体是在有限的时间之前被点亮的，所以更远的光线还没有到达  所以宇宙的起源是什么？  必须有一个 first cause？ 或者宇宙本来就存在，并且将一直存在下去？  各路人马争论不休。哈勃打破了江局：不管你往那个方向看，远处的星系正急速地远离我们而去。这表明宇宙正在膨胀。可以推测，100亿~200亿年前，宇宙起源于大爆炸。\n那么宇宙遵循什么规律？ 两个基本的部分理论——广义相对论和量子力学。广义相对论是描述引力和宇宙的大尺度结构，即可观测到的宇宙范围的尺度的结构，量子力学处理极小尺度的现象。\n可是它们不相容！\n量子引力论？\n 自从文明开始，人们即不甘心于将事件看作互不相关而不可理解的。他们渴求理解世 界的根本秩序。今天我们仍然渴望知道，我们为何在此？我们从何而来？人类求知的最深切的意愿足以为我们所 从事的不断的探索提供正当的理由。而我们的目标恰恰正是对于我们生存其中的宇宙作完整的描述。\n 2. 空间和时间 亚里士多德认为时间和空间是绝对的，而牛顿认为空间是相对的——不存在一个特殊的静止参考系，人们不能决定在不同时间发生的两个事件是否发生在空间的同一位置。但亚里士多德和牛顿都相信绝对时间。也就是说，他们相信人们可以毫不含糊地测量两个事件之间的时间间隔。\n光速 麦克斯韦理论预言，无线电波或光波应以某一固定的速度运动。但这一速度是针对哪个参考系？\n载入史册的释麦克尔逊——莫雷实验发现，竟 然 一 样！\n相对论   不管观察者以任何速度作自由运动，相对于他们而言，科学定律都应该是一样的。\n  光速在任何参考系中不变\n  加速度和引力等效\n  3. 膨胀的宇宙 哈勃发现恒星光谱红移，红移量和距离成正比，因此认为宇宙在膨胀。\n如果它膨胀得相当慢，引力会使之最终停止膨胀，然后开始收缩。但是，如果它膨胀得比某一临界速率更快，引力则永远不足够强而使其膨胀停止，宇宙就永远继续膨胀下去。\n这弗利德曼对于宇宙作了两个非常简单的假定：我们不论往哪个方向看，也不论在任何地方进行观察，宇宙看起来都是一样的。弗利德曼指出，仅仅从这两个观念出发，我们就应该预料宇宙不是静态的。\n弗里德曼假设的证据：\n 宇宙微波背景辐射：各向同性（其实有微小差异，1992 年宇宙背景探险者，或称为 COBE，首次把它们检测到，其幅度大约为 10 万分之 1。尽管这些变化很小，正如我们将在第八章解释的，但它们非常重要） 第二条目前没有直接证据（但地球总不会是宇宙中心吧，不会吧不会吧！）  满足他的两个基本假设的共有三种模型：\n 宇宙膨胀得足够慢，以至于在不同星系之间的引力使膨胀变慢下来，并最终使之停止。然后星系开始相互靠近，宇宙开始收缩。（膨胀\u0026lt;引力） 宇宙膨胀得如此之快，以至于引力虽然能使之缓慢一些，却永 远不能使之停止。（膨胀\u0026gt;引力） 宇宙的膨胀快到足以刚好避免坍缩。（膨胀=引力）  测量宇宙密度可以判断是哪个模型。\n","date":"2021-04-29","permalink":"https://blog.shadiao.online/post/shijianjianshi/","tags":["测试"],"title":"《时间简史》读书笔记"},{"content":"测试一下数学公式功能，后面要写坎巴拉太空计划的一些理论教程。\n参考：https://note.qidong.name/2018/03/hugo-mathjax/\n测试 $$ e^{\\pi i}+1=0 $$\n$$ \\sum_{i=1}^n \\lambda_i $$\n","date":"2021-04-29","permalink":"https://blog.shadiao.online/post/test_formula/","tags":["测试"],"title":"公式测试"},{"content":"记录一下给腾讯云 GPU 服务器安装 tensorflow-gpu 的过程。这玩意事挺多。\n检查必要的东西 检查 Python 版本：\n$ python3  腾讯云自带了 Python3.6。如果没有就装一下。\n验证系统是否有支持 CUDA 的 GPU：\n$ lspci | grep -i nvidia  确认系统已经安装了 gcc：\n$ gcc --version  安装 CUDA 1. 下载 下载 NVIDIA CUDA 工具包，在这找下载链接：\nhttps://developer.nvidia.com/cuda-downloads\n我们装 CUDA Toolkit 11.2 Update 2，target_type 选 runfilelocal 即可。\n2. 安装 首先禁用 Nouveau 驱动\n$ vim /etc/modprobe.d/blacklist-nouveau.conf  如果已有内容就在最后添加，如果是空文件直接输入：\nblacklist nouveau options nouveau modeset=0  然后执行\n$ dracut --force  安装很简单：\n$ sh cuda_\u0026lt;version\u0026gt;_linux.run  输入 accept，之后就一直按 install 与 yes 就行了。执行安装程序会安装自动安装与 CUDA 对应的驱动，所以请不要单独安装驱动。\n3. 设置环境变量 $ vim /etc/profile  文件末尾添加：\nexport PATH=/usr/local/cuda/bin:$PATH export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH export PATH=/usr/local/cuda-11.2/bin:$PATH export LD_LIBRARY_PATH=/usr/local/cuda-11.2/lib64:$LD_LIBRARY_PATH  执行\n$ source /etc/profile  4. 测试 $ nvcc -V $ nvidia-smi  都能看到输出说明大成功，否则完犊子。\n安装 cudnn https://developer.nvidia.com/rdp/cudnn-archive\n要先注册 nvidia 账号，哈哈。\n然后干就完了：\n$ mv cudnn-\u0026lt;version\u0026gt;.solitairetheme8 cudnn-\u0026lt;version\u0026gt;.tgz $ tar -xzvf cudnn-\u0026lt;version\u0026gt;.tgz $ cp cuda/include/cudnn*.h /usr/local/cuda/include $ cp cuda/lib64/libcudnn* /usr/local/cuda/lib64 $ chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn*  安装 tensorflow-gpu $ pip3 install tensorflow-gpu  然后菜了，报错 python setup.py egg_info failed with error code 1。需要先更新一波 pip：\n$ pip3 install --upgrade setuptools $ python3 -m pip install --upgrade pip  装完了进入 Python，测试一波：\n\u0026gt;\u0026gt;\u0026gt; import tensorflow as tf \u0026gt;\u0026gt;\u0026gt; tf.test.is_gpu_available()  又菜了，他说找不到 libcusolver.so.10。我看了一下，/usr/local/cuda-11.1/lib64/ 里面有个 libcusolver.so.11，好家伙，这不是有病嘛，都 11.2 了还在找 .10，封建遗毒啊！来一个骚操作骗他一手：\n$ ln -s /usr/local/cuda-11.2/lib64/libcusolver.so.11 /usr/local/cuda-11.2/lib64/libcusolver.so.10  然后就好了。\n参考文献 [1] https://blog.csdn.net/qq_35540540/article/details/108767800\n[2] https://github.com/tensorflow/tensorflow/issues/43947#issuecomment-739617116\n","date":"2021-04-02","permalink":"https://blog.shadiao.online/post/centos8/","tags":["技术"],"title":"CentOS 8 配置 tensorflow GPU"},{"content":"（持续更新中）\n序  小孩儿小孩儿你别馋， 过了腊八就是年； 腊八粥，喝几天， 哩哩啦啦二十三； 二十三，糖瓜粘； 二十四，扫房子； 二十五，冻豆腐； 二十六，炖猪肉； 二十七，宰公鸡； 二十八，把面发； 二十九，蒸馒头； 三十晚上熬一宿；\n 正月 大年初一，马勒戈逼； 大年初二，像个傻蛋儿； 大年初三，高位截瘫； 大年初四，不识大字； 大年初五，半截入土； 大年初六，绩点没救； 大年初七，呜呼归西；\n正月初八，房倒屋塌； 正月初九，倒拔垂杨柳； 正月初十，掉进化粪池； 正月十一，变成落汤鸡； 正月十二，出门捡破烂儿；\n","date":"2021-02-24","permalink":"https://blog.shadiao.online/post/daily_poem/","tags":["沙雕"],"title":"每日怪诗——大年初二，像个傻蛋儿"},{"content":"我们经常会用到 Python 的各种库，坠痛苦的就是有一些实用的命令记不住，用的时候只好现查，而且这个效率 efficiency…… 所以啊，我整了这么个速查表，以后直接在这里找就好了。\n本贴会持续更新~\n 注意：本文不是教程，而是速查表。\n 实用工具 datetime import datetime  官方文档：https://docs.python.org/zh-cn/3/library/datetime.html\n日期和时间均用datetime.datetime类的对象表示，所以我们先介绍该类的方法\nnow = datetime.datetime.now() # 当前时间，类型：datetime.datetime now.year # 获取年（int） now.month # 月 # 类似地还有：day, hour, minute, second, microsecond  datetime与字符串之间的转化\n# datetime到字符串用strftime（f是format的意思） now.strftime('%Y-%m-%d %H:%M:%S') # '2020-09-02 17:45:18'，注意大小写 # 字符串到datetime用strptime datetime.datetime.strptime('2020-09-02 17:45:18', '%Y-%m-%d %H:%M:%S') # 这个方法很灵活，根据实际情况来写就行，比如你拿到的数据是'2020年9.2' str_time = '2020年9.2' datetime.datetime.strptime(str_time, '%Y年%m.%d') # 就可以正确生成 # 除了%Y，%m这些，还有许多其他类型的代码，完整格式代码请查看https://docs.python.org/zh-cn/3/library/datetime.html#strftime-and-strptime-format-codes  时间差\n# timedelta类用来处理时间差 a = datetime.datetime.strptime('2020-09-02 17:45:18', '%Y-%m-%d %H:%M:%S') b = datetime.datetime.strptime('2020-09-03 17:46:18', '%Y-%m-%d %H:%M:%S') delta = b - a # 返回timedelta对象 delta.days # 1 delta.seconds # 60 # 注意只有 days. seconds 和 microseconds 会存储在内部，days=1，seconds=60表示这个时间差是1天零60秒，这个结果是唯一的，seconds满一天会自动进位，所以并不会出现days=0，seconds=86460这种情况。  数据处理 numpy 这部分主要整理自 https://cs231n.github.io/python-numpy-tutorial/\nThis tutorial was originally contributed by Justin Johnson\n创建 numpy 的核心是 array，它可以表示高维张量，包括向量（rank=1）、矩阵（rank=2）、三阶张量（rank=3）等。我们有很多种方法创建 array：\nimport numpy as np a = np.array([1, 2, 3]) # 通过list创建array b = np.array([1, 2, 3], [4, 5, 6]) # rank=2，矩阵 print(b) # [[1 2 3] # [4 5 6]] c = np.zeros((2, 2)) # 创建2*2的全0矩阵 d = np.ones((1, 2)) # 1*2的全1矩阵 e = np.full((2, 2), 7) # 2*2，元素都是7 f = np.eye(2) # 2*2单位矩阵 g = np.random.random((2, 2)) # 2*2随机矩阵  索引与切片 可使用list作为下标进行索引，并且支持与python类似的切片操作。\n与list不同的是，array的切片操作返回的是引用，因此修改切片后的值会修改原array的值！\n# Create the following rank 2 array with shape (3, 4) # [[ 1 2 3 4] # [ 5 6 7 8] # [ 9 10 11 12]] a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) b = a[:2, 1:3] # [[2 3] # [6 7]]  如果某一维度的索引是 int，array会进行降维。要想避免降维可以使用单个元素的 list：\nrow_r1 = a[1, :] # 矩阵惨遭降维成向量 row_r2 = a[1:2, :] # 如果把1改成1：2，虽然数据一样，但是不降维 row_r3 = a[[1], :] # 用[1]也不降维 print(row_r1, row_r1.shape) print(row_r2, row_r2.shape) print(row_r3, row_r3.shape) # [5 6 7 8] (4,) # [[5 6 7 8]] (1, 4) # [[5 6 7 8]] (1, 4)  切片操作得到的永远是原来 array 的 subarray，如果我想重组怎么办呢？比如 [[1, 2], [3, 4]] 我想得到 [[3, 4], [1, 2], [1, 2]]，可以使用 integer array indexing：\na = np.array([[1, 2], [3, 4]]) b = a[[1, 0, 0], [0, 1]] # b是[[3, 4], [1, 2], [1, 2]]，即a的第1行、第0行、第0行拼接  boolean array indexing 很强大，允许我们进行筛选：\na = np.array([[1,2], [3, 4], [5, 6]]) bool_idx = (a \u0026gt; 2) # Find the elements of a that are bigger than 2; # this returns a numpy array of Booleans of the same # shape as a, where each slot of bool_idx tells # whether that element of a is \u0026gt; 2. # [[False False] # [ True True] # [ True True]] # We use boolean array indexing to construct a rank 1 array # consisting of the elements of a corresponding to the True values # of bool_idx print(a[bool_idx]) # We can do all of the above in a single concise statement: print(a[a \u0026gt; 2]) # [3 4 5 6] # [3 4 5 6]  pandas import pandas as pd # 读取excel，第0个sheet df = pd.read_excel('./filename.xlsx', 0) # 获取行数、列数 nrow = df.shape[0] ncol = df.shape[1] ### 切片、筛选、提取数据 ### # 直接通过'[]'，字符串表示列，数字表示行 df['price'] # 选取名字为'price'的列 df[['name', 'price']]\t# 选取多列，把列名放在list里 df[:2]\t# 第0行和第1行，这里和list的切片操作一样 # iloc和loc：索引用iloc，列名用loc。iloc和loc的优势是可以进行筛选 # loc用法：df.loc[index, column_name] # 一个大坑：loc的行索引是闭区间，而不是python通用的左闭右开（但iloc是正常的） df.loc[2, 'price']\t# 第2行，名字为'price'的列 df.loc[[2,3],['name','price']] # index和column_name都可灵活使用list或切片 df.loc[df['price']\u0026lt;100,'name'] # 筛选，注意筛选条件是针对行的 # iloc用法：只要把loc的列名改成索引 df.iloc[df['price']\u0026lt;100, 2:5] # 一样可以灵活组合list和切片 df.iloc[df['price']\u0026lt;100 | df['price']\u0026gt;200] # 筛选条件'|'表示或，'\u0026amp;'表示与  sklearn # 线性回归 from sklearn import linear_model # 训练数据：X_train, y_train，测试数据：X_test lm = linear_model.LinearRegression() model = lm.fit(X_train, y_train) y_pred = model.predict(X_test) # 交叉验证 from sklearn.model_selection import cross_val_score cross_val_score(m, X, y, cv=5, scoring='neg_mean_squared_error') # 5-fold cross validation, m是sklearn的model  数据结构 heapq import heapq as hq # python的heapq库是在list的基础上添加了堆的操作 # heapq有两种方式创建堆，一种是使用一个空列表，然后使用heapq.heappush()函数把值加入堆中 num = [1,1,4,5,1,4] heapq.heappush(heap, num) # 另外一种就是使用heapq.heapify(list)转换列表成为堆结构 heapq.heapify(num) # 这时候num也变成堆了  网络/爬虫相关 requests import requests # get请求 html = requests.get('www.baidu.com').text # get请求可以优雅地加参数 params = {'q': '搜索测试'} response = requests.get(url='www.google.com/search', params=params).text  BeautifulSoup from bs4 import BeautifulSoup # 之前用request获取html bs = BeautifulSoup(html, 'html.parser') # 查找标签，返回标签html字符串的list p_list = bs.findAll('p')\t# 查找所有\u0026lt;p\u0026gt;标签 div_list = bs.findAll('div', attrs={'class': 'primary'})\t# 带条件筛选\u0026lt;div class='primary'\u0026gt; # 条件可以是正则表达式 a_list = bs.findAll('a', string='[abs]')\t# 字符串包含[abs]  json import json import requests data = requests.get('www.baidu.com').content.decode()\t# 某请求返回的字符串格式的json # 字符串转json data_js = json.loads(data) ","date":"2021-02-22","permalink":"https://blog.shadiao.online/post/python/","tags":["技术"],"title":"Python 速查表"}]